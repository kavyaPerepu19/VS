Cursors in PL/SQL :

-> A cursor is a temporary work area created in the system memory when a SQL statement is executed. A cursor contains information on a select statement and the rows of data accessed by it.

-> This temporary work area is used to store the data retrieved from the database, and manipulate this data. A cursor can hold more than one row, but can process only one row at a time. The set of rows the cursor holds is called the active set.

-> There are two types of cursors in PL/SQL : 

1) Implicit cursors : These are created by default when DML statements like, INSERT, UPDATE, and DELETE statements are executed. They are also created when a SELECT statement that returns just one row is executed. 
Eg:
SQL > BEGIN
 UPDATE ACCOUNT SET BALANCE = BALANCE + 500 WHERE ACC_TYPE='RD';   
 IF SQL%FOUND THEN
  DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' Rows Updated');
 ELSE
  DBMS_OUTPUT.PUT_LINE('No Rows Updated');
 END IF;
END;
/

2) Explicit cursors : They must be created when you are executing a SELECT statement that returns more than one row. Even though the cursor stores multiple records, only one record can be processed at a time, which is called current row. When you fetch a row, the current row position moves to next row.

Cursor Operations : The following are the operations that are performed on a cursor.

1) Declare Cursor : A cursor is declared by defining the SQL statement that returns a result set. The syntax for declaring a cursor is :
DECLARE CURSOR cursor_name IS SELECT statement 
[FOR UPDATE OF column(s)];

2) Open Cursor : A Cursor is opened and populated by executing the SQL statement defined by it. Its syntax is :
 OPEN cursor_name; 

3) Fetch Data from cursor : When cursor is opened, rows can be fetched from the cursor one by one to do data manipulation. Its syntax is :
 FETCH cursor_name INTO var-1,[var-2,...];

4) Close Cursor : After data manipulation, we should close the cursor explicitly. Its syntax is:
  CLOSE cursor_name; 
----------------------------------------------------------------
Cursor Attributes : During cursor implementation, the following attributes are used :
-> %TYPE : Assigns the size and type of a column to a variable
-> %ROWTYPE : Assigns the size of a row to a variable
-> %ISOPEN : Returns TRUE if the cursor is already opened; FALSE otherwise
-> %ISNOTOPEN : Returns TRUE if the cursor is not opened;FALSE otherwise
-> %FOUND : Returns TRUE when some record is fetched by the cursor; FALSE otherwise
-> %NOTFOUND : Returns TRUE when no record is fetched by the cursor;FALSE otherwise
-> %ROWCOUNT : Returns the no. of records assigned to the cursor.
-----------------------------------------------------------
Exceptions on Cursors : During cursor programming, the following exceptions can be handled.
-> INVALID_CURSOR : Raised when we try to access cursor data without opening it.
-> CURSOR_ALREADY_OPEN : Raised when we try to reopen a cursor without closing.
-> NO_DATA_FOUND : Raised when no records are assigned to the cursor.
-> TOO_MANY_ROWS : Raised when multiple records are assigned to the cursor.
....
--------------------------------------------------------------------
-- Cursor Program to display the records of CUSTOMER table
-- Implementing SELECT * FROM CUSTOMER

DECLARE
 CUSTNO CUSTOMER.CUST_ID%TYPE;
 CNAME VARCHAR2(10);
 CITY VARCHAR2(10);
 CUST_REC CUSTOMER%ROWTYPE;
 CURSOR C1 IS SELECT * FROM CUSTOMER;
 CNT NUMBER := 0;
BEGIN
 OPEN C1;
 DBMS_OUTPUT.PUT_LINE('Records in CUSTOMER table are : ');
 DBMS_OUTPUT.PUT_LINE('-------------------------------');
 DBMS_OUTPUT.PUT_LINE('CUST_ID  CUST_NAME   CUST_CITY ');
 DBMS_OUTPUT.PUT_LINE('-------------------------------');
 LOOP
  FETCH C1 INTO CUST_REC;
  EXIT WHEN C1%NOTFOUND;
  CUSTNO := CUST_REC.CUST_ID;
  CNAME := CUST_REC.CUST_NAME;
  CITY := CUST_REC.CUST_CITY;
  DBMS_OUTPUT.PUT_LINE(CUSTNO  || '      ' || RPAD(CNAME,10,' ')  || '  ' || CITY);
  CNT := CNT + 1;
 END LOOP;
 DBMS_OUTPUT.PUT_LINE('-------------------------------');
 DBMS_OUTPUT.PUT_LINE('No. of rows fetched : ' || CNT);
 DBMS_OUTPUT.PUT_LINE('-------------------------------');
 CLOSE C1;
END;
/

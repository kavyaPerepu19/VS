1) Create a package as below:
CREATE OR REPLACE PACKAGE ACC_PACK IS
 PROCEDURE DEPOSIT(ACCNO NUMBER,DEP_AMT NUMBER);
 PROCEDURE WITHDRAW(ACCNO NUMBER,W_AMT NUMBER);
 FUNCTION SHOWBALANCE(ACCNO NUMBER) RETURN NUMBER;
 PROCEDURE FUND_TRANSFER(SRC_ACCNO NUMBER,TRG_ACCNO NUMBER,TR_AMT NUMBER);
END;
/
----------------------------------
2) Create the package body:

CREATE OR REPLACE PACKAGE BODY ACC_PACK IS
PROCEDURE DEPOSIT(ACCNO NUMBER,DEP_AMT NUMBER) IS
 BALANCE ACCOUNT.BALANCE%TYPE;
 CURSOR C1 IS SELECT BALANCE FROM ACCOUNT WHERE ACC_ID = ACCNO;
BEGIN
 OPEN C1;
 FETCH C1 INTO BALANCE;
 IF C1%NOTFOUND THEN
  RAISE_APPLICATION_ERROR(-20011,'Invalid Account Number. Unable to Deposit');
 END IF;
 CLOSE C1;
 UPDATE ACCOUNT SET BALANCE = BALANCE + DEP_AMT WHERE ACC_ID = ACCNO;
END;

PROCEDURE WITHDRAW(ACCNO NUMBER,W_AMT NUMBER) IS
 BALANCE ACCOUNT.BALANCE%TYPE;
 CURSOR C1 IS SELECT BALANCE FROM ACCOUNT WHERE ACC_ID = ACCNO;
BEGIN
 IF W_AMT > 10000 THEN
  RAISE_APPLICATION_ERROR(-20011,'Max. Withdraw Limit(Rs.10000) Exceeded');
 END IF;
 OPEN C1;
 FETCH C1 INTO BALANCE;
 IF C1%NOTFOUND THEN
  RAISE_APPLICATION_ERROR(-20012,'Invalid Account Number. Cannot Perform Withdrawal.');
 END IF;
 CLOSE C1;
 IF BALANCE - W_AMT < 1000 THEN
  RAISE_APPLICATION_ERROR(-20012,'Insufficient Funds. Maintain Min. Balance(Rs.1000)');
 END IF;
 UPDATE ACCOUNT SET BALANCE = BALANCE - W_AMT WHERE ACC_ID = ACCNO;
END;

FUNCTION SHOWBALANCE(ACCNO NUMBER) RETURN NUMBER IS
 BALANCE NUMBER;
 CURSOR C1 IS SELECT BALANCE FROM ACCOUNT WHERE ACC_ID = ACCNO;
BEGIN
 OPEN C1;
 FETCH C1 INTO BALANCE;
 IF C1%NOTFOUND THEN
  RAISE_APPLICATION_ERROR(-20011,'Invalid Account Number. Cannot Fetch Balance.');
 END IF;
 RETURN BALANCE;
 CLOSE C1;
END;

PROCEDURE FUND_TRANSFER(SRC_ACCNO NUMBER,TRG_ACCNO NUMBER,TR_AMT NUMBER) IS
 BALANCE NUMBER;
 CURSOR C1 IS SELECT BALANCE FROM ACCOUNT WHERE ACC_ID = SRC_ACCNO;
 CURSOR C2 IS SELECT BALANCE FROM ACCOUNT WHERE ACC_ID = TRG_ACCNO;
BEGIN
 IF TR_AMT > 25000 THEN
  RAISE_APPLICATION_ERROR(-20001,'Max. Transfer Limit(Rs.25000) Exceeded');
 END IF;
 OPEN C1;
 FETCH C1 INTO BALANCE;
 IF C1%NOTFOUND THEN
  RAISE_APPLICATION_ERROR(-20002,'Invalid Source Account Number.');
 END IF;
 CLOSE C1;
 IF BALANCE - TR_AMT < 1000 THEN
  RAISE_APPLICATION_ERROR(-20003,'Insufficient Funds. Cannot Withdraw.');
 END IF;
 OPEN C2;
 FETCH C2 INTO BALANCE;
 IF C2%NOTFOUND THEN
  RAISE_APPLICATION_ERROR(-20004,'Invalid Target Account Number.');
 END IF;
 CLOSE C2;
 UPDATE ACCOUNT SET BALANCE = BALANCE - TR_AMT WHERE ACC_ID = SRC_ACCNO;
 UPDATE ACCOUNT SET BALANCE = BALANCE + TR_AMT WHERE ACC_ID = TRG_ACCNO;
END;
END;
/
-------------------------------------
=> Invoking the package members:

BEGIN
 DBMS_OUTPUT.PUT_LINE('Balance in 204 before transfering 5000 : ' || ACC_PACK.SHOWBALANCE(204));
 DBMS_OUTPUT.PUT_LINE('Balance in 205 before transfering 5000 : ' || ACC_PACK.SHOWBALANCE(205));
 ACC_PACK.FUND_TRANSFER(204,205,5000);
 DBMS_OUTPUT.PUT_LINE('Balance in 204 after transfering 5000 : ' || ACC_PACK.SHOWBALANCE(204));
 DBMS_OUTPUT.PUT_LINE('Balance in 205 after transfering 5000 : ' || ACC_PACK.SHOWBALANCE(205));
end;
/

=> Save and run
========================================
=> Create and implement a package to perform the following loan-based operations:

1) Create the package specification:

SQL > CREATE OR REPLACE PACKAGE LOAN_PACK IS
 PROCEDURE BORROW(LOANNO LOAN.LOAN_ID%TYPE,LTYPE LOAN.LOAN_TYPE%TYPE, AMOUNT LOAN.LOAN_AMT%TYPE,CUSTNO CUSTOMER.CUST_ID%TYPE);
 PROCEDURE PAY_INST(LOANNO LOAN.LOAN_ID%TYPE,INST_AMT NUMBER);
 FUNCTION CHECK_DUE(LOANNO LOAN.LOAN_ID%TYPE) RETURN NUMBER;
 PROCEDURE CLOSE_LOAN(LOANNO LOAN.LOAN_ID%TYPE);
END;
/
---------------------------------------
PL/SQL :
== Programs
== Conditions
== Loops
== Cursors
== Procedures
== Functions
== Packages
=> Triggers
=> Arrays